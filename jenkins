pipeline {
    agent any

    environment {
        REACT_IMAGE = "your_dockerhub_username/frontend:latest"
        GO_IMAGE = "your_dockerhub_username/backend:latest"
        EKS_CLUSTER = "your-eks-cluster"
        AWS_REGION = "us-west-2" // Set to your AWS region
        SONARQUBE_SERVER = 'SonarQube'
        SONARQUBE_CREDENTIALS_ID = 'sonarqube-credentials'
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/your-repo/devops-fullstack-app.git'
            }
        }

        stage('Build Frontend Image') {
            agent { docker { image 'node:14' } }
            steps {
                dir('frontend') {
                    sh 'npm install'
                    sh 'npm run build'
                }
                script {
                    docker.build(REACT_IMAGE, 'frontend')
                }
            }
        }

        stage('Build Backend Image') {
            agent { docker { image 'golang:1.21.0' } }
            steps {
                dir('backend') {
                    sh 'go mod download'
                    sh 'CGO_ENABLED=0 GOOS=linux go build -o app'
                }
                script {
                    docker.build(GO_IMAGE, 'backend')
                }
            }
        }

        stage('Security Scan with Trivy') {
            steps {
                sh """
                    trivy image ${REACT_IMAGE} --severity HIGH,CRITICAL --no-progress
                    trivy image ${GO_IMAGE} --severity HIGH,CRITICAL --no-progress
                """
            }
        }

        stage('Code Analysis with SonarQube') {
            environment {
                SONAR_SCANNER_HOME = tool 'SonarQube Scanner'
            }
            steps {
                withSonarQubeEnv(SONARQUBE_SERVER) {
                    dir('frontend') {
                        sh "${SONAR_SCANNER_HOME}/bin/sonar-scanner -Dsonar.projectKey=frontend -Dsonar.sources=. -Dsonar.login=${SONARQUBE_CREDENTIALS_ID}"
                    }
                    dir('backend') {
                        sh "${SONAR_SCANNER_HOME}/bin/sonar-scanner -Dsonar.projectKey=backend -Dsonar.sources=. -Dsonar.login=${SONARQUBE_CREDENTIALS_ID}"
                    }
                }
            }
        }

        stage('Push Images to DockerHub') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'dockerhub-credentials') {
                        docker.image(REACT_IMAGE).push()
                        docker.image(GO_IMAGE).push()
                    }
                }
            }
        }

        stage('Deploy to EKS') {
            steps {
                script {
                    sh """
                        aws eks update-kubeconfig --region ${AWS_REGION} --name ${EKS_CLUSTER}
                        kubectl apply -f k8s/deployment.yaml
                        kubectl apply -f k8s/service.yaml
                    """
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        failure {
            mail to: 'your-email@example.com',
                 subject: "Jenkins Build Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                 body: "Check the console output for details: ${env.BUILD_URL}"
        }
    }
}
