pipeline {
    agent any

    environment {
        FRONTEND_IMAGE = 'your-dockerhub-username/frontend-app'
        BACKEND_IMAGE = 'your-dockerhub-username/backend-app'
        DOCKER_CREDENTIALS_ID = 'dockerhub-credentials'
    }

    stages {
        stage('Checkout Code') {
            steps {
                // Pull the latest code from the repository
                checkout scm
            }
        }

        stage('Build Frontend') {
            steps {
                dir('frontend') {
                    // Install dependencies and build the React application
                    sh 'npm install'
                    sh 'npm run build'
                }
            }
        }

        stage('Build Backend') {
            steps {
                dir('backend') {
                    // Build the Golang binary
                    sh 'go mod download'
                    sh 'go build -o main .'
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                // Build Docker images for frontend and backend
                script {
                    docker.build("${FRONTEND_IMAGE}:latest", 'frontend')
                    docker.build("${BACKEND_IMAGE}:latest", 'backend')
                }
            }
        }

        stage('Push Docker Images') {
            steps {
                // Push both images to DockerHub
                script {
                    docker.withRegistry('https://index.docker.io/v1/', DOCKER_CREDENTIALS_ID) {
                        docker.image("${FRONTEND_IMAGE}:latest").push()
                        docker.image("${BACKEND_IMAGE}:latest").push()
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                // Apply Kubernetes deployment configurations
                script {
                    sh '''
                    kubectl apply -f k8s/frontend-deployment.yml
                    kubectl apply -f k8s/frontend-service.yml
                    kubectl apply -f k8s/backend-deployment.yml
                    kubectl apply -f k8s/backend-service.yml
                    '''
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up workspace...'
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed. Please check the logs.'
        }
    }
}

